module milestone2
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input   [9:0]   SW;
	input   [3:0]   KEY;

	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]

	wire resetn;
	assign resetn = KEY[0];

	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(1),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";

  background b(KEY[1], KEY[2], x, y, CLOCK_50, resetn, colour);

	// Put your code here. Your code should produce signals x,y,colour and writeEn/plot
	// for the VGA controller, in addition to any other functionality your design may require.

    // Instansiate datapath
	// datapath d0(...);

    // Instansiate FSM control
    // control c0(...);

endmodule



module background(walk, jump, x, y, clock, reset, color);
  input walk;
  input jump;
  input clock;
  input reset;
  input [7:0] x;
  input [6:0] y;
  output [2:0] color;

  reg [25:0] sclkk;
  reg fall = 0;
  integer yasuhati;
  integer yasuhati_x;
  reg scroll = 0;

  initial begin
    yasuhati = 30;
    yasuhati_x = 50;
    scroll = 0;
  end

  always @ (posedge clock) begin
    sclkk <= sclkk + 1;
    if (sclkk == 26'h2DC6C0)
    begin
      sclkkk = 0;
      if (jump && !fall)
        yasuhati = yasuhati - 10; // jump
      else if (walk && !fall)
        scroll <= 1;
      else if (!reset)
      begin
        // reset to normal state.
        yasuhati = 30;
        hit <= 0;
        yasuhati_x = 50;
      end
      else if (yasuhati - 15 <= 15)
        yasuhati = 30; // upper bound.
      else if (yasuhati >= 100)
        yasuhati = 100; // fall in the hole.
        fall <= 1;
      else
        yasuhati = yasuhati + 8; // fall
    end
  end

  always @ ( * ) begin
    // graphics part.
    if (x >= 0 && x <= 8'd159 && y >= 7'd0 && y <= 7'd119)
      color = 3'b111; // background white;
    else if (x >= 0 && x <= 8'd159 && y >= 7'd90 && y <= 7'd119)
      color = 3'b000; // ground;

    if (x >= yasuhati_x && x <= yasuhati_x + 7'd15 && y >= yasuhati - 7'd15 && y <= yasuhati)
      color = 3'b011; // yasuhati; can improve this later.

    if (hit)
    begin
      color <= 3'b0;
    end
  end
endmodule
